// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    role          String?
    account       Account[]
    sessions      Session[]

    Lecturer Lecturer?
    Executor Executor?
    Student  Student?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id     String  @id @default(cuid())
    name   String
    time   String
    place  String
    price  Decimal
    income Decimal

    lecturer   Lecturer? @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
    lecturerId String?

    Executor   Executor? @relation(fields: [executorId], references: [id])
    executorId String?

    Student       Student[]
    PaymentRecord PaymentRecord[]
    Notice        Notice[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Lecturer {
    id         String @id @default(cuid())
    name       String
    profession String
    field      String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    Course Course[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Executor {
    id     String @id @default(cuid())
    name   String
    status String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    Course Course[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Student {
    id        String @id @default(cuid())
    name      String
    sex       String
    checkTime String
    company   String
    post      String
    level     String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    Course        Course[]
    PaymentRecord PaymentRecord[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Notice {
    id      String @id @default(cuid())
    title   String
    content String

    course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([title])
}

model PaymentRecord {
    id        String   @id @default(cuid())
    payTime   DateTime
    payAmount Decimal

    student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String?

    course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([payTime])
}

model Topic {
    id          String @id @default(cuid())
    name        String
    description String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}
